(window.webpackJsonp=window.webpackJsonp||[]).push([[128],{341:function(e,t,a){"use strict";a.r(t);var n=a(1),s=Object(n.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("div",{staticClass:"content"},[a("h1",{attrs:{id:"puppeteer拦截请求"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#puppeteer拦截请求","aria-hidden":"true"}},[e._v("#")]),e._v(" puppeteer拦截请求")]),e._v(" "),a("p",[e._v("当我们浏览web时，一系列HTTP请求和响应将在浏览器和所访问的页面之间进行交换。在一些场景中，监视或操作此通信流是有用的，而不是让它按原样发生。")]),e._v(" "),a("h1",{attrs:{id:"请求拦截"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#请求拦截","aria-hidden":"true"}},[e._v("#")]),e._v(" 请求拦截")]),e._v(" "),a("p",[e._v("请求拦截请求拦截使我们能够观察在脚本执行过程中交换了哪些请求和响应。例如，这是我们在加载测试网站时打印它们的方法")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const puppeteer = require('puppeteer');\n\n(async () => {\n  const browser = await puppeteer.launch()\n  const page = await browser.newPage()\n\n  await page.setViewport({ width: 1200, height: 800 })\n\n  await page.setRequestInterception(true)\n\n  page.on('request', (request) => {\n    console.log('>>', request.method(), request.url())\n    request.continue()\n  })\n\n  page.on('response', (response) => {\n    console.log('<<', response.status(), response.url())\n  })\n\n  await page.goto('https://danube-webshop.herokuapp.com/')\n\n  await page.screenshot({ path: 'screenshot.png' })\n\n  await browser.close()\n})()\n\n")])])]),a("p",[e._v("我们可能想要干预并过滤发出的请求。例如，在抓取web页面时，我们可能希望阻止不必要的元素加载，以加快过程并降低带宽的使用。在下面的代码片段中，我们将中止测试网站上的所有图像请求。我们将根据它们的resourceType来识别它们，同时允许所有其他请求不经过修改通过。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const puppeteer = require('puppeteer');\n\n(async () => {\n  const browser = await puppeteer.launch()\n  const page = await browser.newPage()\n\n  await page.setViewport({ width: 1200, height: 800 })\n\n  await page.setRequestInterception(true)\n\n  page.on('request', (request) => {\n    if (request.resourceType() === 'image') request.abort()\n    else request.continue()\n  })\n\n  await page.goto('https://danube-webshop.herokuapp.com/')\n\n  await page.screenshot({ path: 'screenshot.png' })\n\n  await browser.close()\n})()\n\n")])])]),a("p",[e._v("因此，您将看到网站徽标没有加载。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://theheadless.dev/request-interception-image.png",alt:""}}),e._v("\n类似地，将resourceType切换到样式表将导致目标网站加载时没有任何CSS样式。")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://theheadless.dev/request-interception-css.png",alt:""}}),e._v("\n响应拦截")]),e._v(" "),a("p",[e._v("将一个或多个软件组件与它们的依赖项隔离开来，使它们更易于测试。 我们可以通过将具有这种依赖性的交互替换为模拟的，简化的交互来实现。 这也称为存根。")]),e._v(" "),a("p",[e._v("Puppeteer对我们来说很容易，因为对于我们可以拦截的每个请求，我们都可以添加响应。 Playwright尚不提供此功能。")]),e._v(" "),a("p",[e._v("每次加载时，我们的测试网站都会向其后端发送请求，以获取最畅销书的列表。 对于我们的示例，我们将截取此响应并对其进行修改以返回我们即时定义的一本书。")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("const puppeteer = require('puppeteer')\n\nconst mockResponseObject = [\n  {\n    id: 1,\n    title: 'How to Mock a Response',\n    author: 'A. Friend',\n    genre: 'business',\n    price: '0.00',\n    rating: '★★★★★',\n    stock: 65535\n  }\n];\n\n(async () => {\n  const browser = await puppeteer.launch()\n  const page = await browser.newPage()\n\n  await page.setRequestInterception(true)\n\n  page.on('request', (request) => {\n    if (request.url() === 'https://danube-webshop.herokuapp.com/api/books') {\n      request.respond({\n        content: 'application/json',\n        body: JSON.stringify(mockResponseObject)\n      })\n    } else request.continue()\n  })\n\n  await page.setViewport({ width: 1200, height: 800 })\n\n  await page.goto('https://danube-webshop.herokuapp.com/')\n\n  await page.screenshot({ path: 'screenshot.png' })\n\n  await browser.close()\n})()\n\n")])])]),a("p",[e._v("下面是使用stub响应后的主页的样子")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://theheadless.dev/response-interception.png",alt:""}}),e._v("\n运行上面的示例，如下所示")]),e._v(" "),a("div",{staticClass:"language- extra-class"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("node request-interception.js\n\n")])])]),a("p",[e._v("总结\nPuppeteer和Playwright使我们可以控制传出的HTTP请求。")]),e._v(" "),a("p",[e._v("使用Puppeteer，我们可以轻松地对HTTP响应进行存根。")]),e._v(" "),a("h3",{attrs:{id:"author"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#author","aria-hidden":"true"}},[e._v("#")]),e._v(" author")]),e._v(" "),a("p",[e._v("石头 磊哥 seven 随便叫")]),e._v(" "),a("h3",{attrs:{id:"company"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#company","aria-hidden":"true"}},[e._v("#")]),e._v(" company")]),e._v(" "),a("p",[e._v("thoughtworks")]),e._v(" "),a("p",[e._v("大家好，本人不才，目前依旧混迹于thoughtworks，做着一名看起来像全栈的QA，兴趣爱好前端，目前是thoughtworks 西安QA社区的leader，如果有兴趣分享话题，或者想加入tw，可以找我")]),e._v(" "),a("h3",{attrs:{id:"roles"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#roles","aria-hidden":"true"}},[e._v("#")]),e._v(" roles")]),e._v(" "),a("p",[e._v("QA（营生） dev（front-end dev 兴趣爱好）")]),e._v(" "),a("h3",{attrs:{id:"联系方式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#联系方式","aria-hidden":"true"}},[e._v("#")]),e._v(" 联系方式")]),e._v(" "),a("p",[e._v("如果想转载或者高薪挖我 请直接联系我 哈哈")]),e._v(" "),a("h4",{attrs:{id:"wechat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#wechat","aria-hidden":"true"}},[e._v("#")]),e._v(" wechat:")]),e._v(" "),a("p",[e._v("qileiwangnan")]),e._v(" "),a("h4",{attrs:{id:"email"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#email","aria-hidden":"true"}},[e._v("#")]),e._v(" email:")]),e._v(" "),a("p",[e._v("qileilove@gmail.com")])])}],!1,null,null,null);t.default=s.exports}}]);