(window.webpackJsonp=window.webpackJsonp||[]).push([[87],{300:function(_,v,e){"use strict";e.r(v);var t=e(1),p=Object(t.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var _=this,v=_.$createElement,e=_._self._c||v;return e("div",{staticClass:"content"},[e("p",[_._v('view: post\nlayout: post                          # Only in unique we use the "layout: post"\nlang: zh                              # Lang is required\nauthor:\ntitle: 19个最佳跨浏览器测试技巧，可加快发布速度\ndescription:\nexcerpt:\ncover: true\ncoverAlt: /home.jpg\ndemo:\ncategories:')]),_._v(" "),e("ul",[e("li",[_._v("Agile QA\ntags:")]),_._v(" "),e("li",[_._v("Agile_QA")]),_._v(" "),e("li",[_._v("Agile testing")]),_._v(" "),e("li",[_._v("QA\ncreated_at: 2019-12-26 09:00\nupdated_at: 2016-11-26 09:00\nmeta:\n# If you have cover image")]),_._v(" "),e("li",[_._v("property: og:image\ncontent: /autores/my.jpeg")]),_._v(" "),e("li",[_._v("name: twitter:image\ncontent: /autores/my.jpeg")])]),_._v(" "),e("hr"),_._v(" "),e("h1",{attrs:{id:"_19个最佳跨浏览器测试技巧，可加快发布速度"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#_19个最佳跨浏览器测试技巧，可加快发布速度","aria-hidden":"true"}},[_._v("#")]),_._v(" 19个最佳跨浏览器测试技巧，可加快发布速度")]),_._v(" "),e("p",[_._v("您为什么认为某些网站的效果要好于其他网站？ 当可以选择免费访问时，导致人们将钱花在Netflix等平台上的原因。 如果10年前，您会要求我为该Netflix订阅付款，那么我会嘲笑您。 但是，时代不同，我的朋友。 现在，我希望在那里然后而不是其他任何地方观看我的所有内容。")]),_._v(" "),e("p",[_._v("导致Netflix成功的主要因素之一是，它们提供了无缝的用户体验，而没有任何干扰，这使您想离开它。 他们会不断努力，以确保自己的网站没有任何错误并且不会妨碍用户体验。 用户使用数千种设备在Netflix上流式传输内容，他们不仅需要确保自己的网站在所有设备上都能流畅运行，而且还需要确保快速运行。 无论是跨浏览器测试还是自动浏览器测试，他们都毫不动摇！")]),_._v(" "),e("p",[_._v("在本文中，我将分享一些顶级的跨浏览器测试技巧，这些技巧将使您更快地发布。")]),_._v(" "),e("p",[_._v("1.根据用户的观点进行测试")]),_._v(" "),e("p",[_._v("任何良好的网站都需要确保用户能够无中断地执行其任务。 因此，从用户角度测试网站有助于定义用户与网站互动的测试方案。 例如，以一个售票网站为例，您作为开发人员或测试人员可能知道车站名称或车站代码，但与用户并不相同。 用户可以输入他们的目的地为新德里，但找不到火车，但可以从同一地点新德里的其他车站找到替代火车。 测试人员需要牢记这种情况。")]),_._v(" "),e("p",[_._v("2.专注于测试范围")]),_._v(" "),e("p",[_._v("很多时候，测试人员专注于测试用例而不是测试覆盖率。 关注测试覆盖范围有助于确定网站实际上正在运行应用程序代码并对其进行测试。 测试人员可能会编写非常好的测试用例，但如果不测试实际的应用程序代码，他们将无法取得任何成果。 此外，测试覆盖率还有助于在很早的阶段指出应用程序需求中的差距。")]),_._v(" "),e("p",[_._v("3.准备一个跨浏览器矩阵")]),_._v(" "),e("p",[_._v("跨浏览器矩阵正在准备要在其上测试网站的浏览器表。 这是将在其上查看您的网站的浏览器（可能的）列表。 准备浏览器矩阵可以节省大量时间，而这可能是在永远无法打开您的网站的浏览器上测试网站所浪费的时间。")]),_._v(" "),e("p",[_._v("也许您在IE 8上进行了测试，后来发现您的预期用途没有使用它。 为了准备浏览器矩阵，测试人员可以使用任何网络分析工具（例如Google Analytics（分析））来查看网站上的流量来源，或从列表中删除过时的浏览器（不是用于进一步开发，而是在市场中）。 一旦完成，就可以实现自动浏览器测试，以确保没有时间花费在每个浏览器和操作系统组合上手动重复测试方案。")]),_._v(" "),e("p",[_._v("4.每天监控自动化测试")]),_._v(" "),e("p",[_._v("每天自动化测试可能听起来很忙，但是从长远来看，它可以帮助组织，尤其是那些经常发布更新的组织。 每天自动化测试有助于减少将来堆积的测试用例，并避免回溯大量代码中的错误。 每日自动化报告还可以帮助您找出应用程序中很小的错误，这些错误在完全开发应用程序时可以忽略。")]),_._v(" "),e("p",[_._v("使用PyTest自动执行Selenium Test Automation脚本的报告")]),_._v(" "),e("p",[_._v("5.在过程中尽早跟踪错误")]),_._v(" "),e("p",[_._v("在流程的早期阶段跟踪错误可以使整个开发过程顺利进行。 如果可以早点声明这些错误，而不是立即将它们一起发送，那么这不会给开发人员带来压力，并且可以避免由于紧急情况而导致的错误。 测试人员还可以通过尽早发现错误来帮助并避免在以后的开发过程中可能出现的重大异常。")]),_._v(" "),e("p",[_._v("在网站中查找错误的27条提示")]),_._v(" "),e("p",[_._v("6.使用持续集成")]),_._v(" "),e("p",[_._v("应用程序是不断开发的。 测试人员可能认为，一旦将应用程序开发到一定程度，就可以轻松地对其进行测试，这显然是错误的方法。 提高效率的正确方法是每天对代码提交运行自动化测试，并在代码库中进行持续集成。 这样，测试人员和开发人员可以跟踪应用程序在开发过程中的行为以及应用程序缺少的重要领域。 一旦确定了这些，开发人员就可以以特定的和定义的方式进行开发。 如果立即对应用程序进行测试，则不仅浪费大量时间，而且容易出错。")]),_._v(" "),e("p",[_._v("7.使用不同的工具进行不同的测试")]),_._v(" "),e("p",[_._v("测试人员可能需要根据需要和要求执行不同类型的测试。 具体来说，对于跨浏览器测试，测试人员必须执行手动（显然是小规模）和自动测试（大规模）。 在跨浏览器测试中，重要的是要拥有一个可以在一个地方满足所有需求的工具，而不是在不同的工具上来回切换。 我个人使用LambdaTest执行自动浏览器测试，因为它具有大量受支持的集成（例如JIRA和Selenium），可节省大量时间。")]),_._v(" "),e("p",[_._v("8.不追求100％自动化")]),_._v(" "),e("p",[_._v("100％自动化是新测试人员在测试生涯的早期阶段不了解的神话。 当手动进行测试时，网站中的某些元素会得到较好的测试。 因此，这比测试人员测试“自动化”中有意义的代码（例如频繁更改代码的元素）要好。 听起来可能有些反差，但是测试要由自动化进行手动测试的元素会浪费很多时间。 试图在这些元素中实现自动化会降低效率，并增加整个系统的测试用例。 测试人员必须在测试之前分析并确定这些元素。 一个小例子是在三个浏览器上仅测试一个元素，可以通过任何跨浏览器测试工具轻松地手动完成此操作，而无需创建测试用例和脚本来执行自动浏览器测试。")]),_._v(" "),e("p",[_._v("9.执行左移测试")]),_._v(" "),e("p",[_._v("在我多年的测试中，我发现这一点可以节省时间。 进行左移测试不仅可以节省时间，而且对于突出显示一些主要要求和体系结构缺陷（对于如果在网站上进行较晚的测试可能不会引起注意）来说至关重要。 这也浪费了开发人员的时间，因为已经在这些元素上投入了大量时间。 执行左移测试还有助于高效调试，因为很难一次调试所有应用程序。 同样，由于在开发好百分比的应用程序时将截止最后期限，因此测试人员可能会急于进入测试阶段，从而导致应用程序效率低下。")]),_._v(" "),e("p",[_._v("左移测试：及早测试，经常测试")]),_._v(" "),e("p",[_._v("10.推动单元测试")]),_._v(" "),e("p",[_._v("通常，新的测试人员倾向于忽略单元测试在节省时间和测试应用程序方面所起的作用。 测试Web应用程序的小单元而不是集成版本，有助于识别本来可以忽略的错误和缺陷。 当在初始阶段和较小的代码单元中发现错误时，它将对测试人员和开发人员造成较小的压力。 在应用程序的小部分中，错误和错误很容易纠正。")]),_._v(" "),e("p",[_._v("11.使用代码整理")]),_._v(" "),e("p",[_._v("有时，测试人员可能会付出很多努力才能最终得出结论，该网站上注意到的问题只是语法错误。 在语法和结构错误上浪费时间是一种不良的测试实践。 代码整理有助于自动识别这些类型的错误，并在以后的过程中节省测试人员的时间。 在跨浏览器测试中，有许多工具可用于代码插入，例如CSS Lint，JSHint。")]),_._v(" "),e("p",[_._v("12.选择并行测试")]),_._v(" "),e("p",[_._v("并行测试是跨浏览器测试方法的常用方法。 当有新的操作系统，浏览器或设备启动时（这些天确实很频繁），经常需要进行并行测试。 在这种情况下，需要测试网站的设备或操作系统或浏览器（在不同的操作系统上），以检查所有功能是否正常运行。 就像使用列表中的另一个浏览器（OS）执行跨浏览器测试一样。 与硒并行测试比串行测试减少了很多时间，如果遇到这种情况，则应始终执行。 带有在线自动浏览器测试工具的Selenium WebDriver是完成并行任务的最推荐软件。")]),_._v(" "),e("p",[_._v("\\13. CSS分析")]),_._v(" "),e("p",[_._v("有时，在将代码添加到CSS模块中时可能很难确定遗留代码的重要性。可以通过使用！important CSS属性来处理这种情况，这意味着所有后续规则都将被忽略，而！ “重要”将覆盖所有以前的样式规则，并增加其优先级。")]),_._v(" "),e("p",[_._v("有几种用于CSS代码分析的工具，该类别中最常用的工具之一是CSS Parker。 这是一个样式表分析工具，将测试您的样式表并返回有关其复杂性的报告。")]),_._v(" "),e("p",[_._v("创建与浏览器兼容的HTML和CSS的指南")]),_._v(" "),e("p",[_._v("14.利用断点")]),_._v(" "),e("p",[_._v("断点是在一秒钟内导航到一行代码的最简单方法。 如果您仅测试一行，并且想查看所做的更改如何影响了网站，那么断点是一种解决方法。 浏览器的内置开发者工具（了解Chrome开发者工具）提供了将这些断点应用于特定代码行的功能。")]),_._v(" "),e("p",[_._v("断点有助于在应用网站时准确地中断网站流量。 因此，如果您重新加载页面以测试您的网站，则加载过程将自动中断，并且此时将向测试人员显示网站的状态。 想手动方式吗？ 如果测试人员即使使用搜索功能继续手动查找行，也将花费大量时间，因为在网站的单个页面上有多个具有相同名称的标签（和属性）。")]),_._v(" "),e("p",[_._v("15.将可访问性测试记入帐户")]),_._v(" "),e("p",[_._v("随着当今应用程序开发的高速发展，每个应用程序都试图与其对应的应用程序有所不同。 我通常会看到一个应用程序试图覆盖最大的人群，以便残疾人也可以使用该平台。 通过铭记这些用户来执行测试称为可访问性测试。 可能会发生这种情况，当前由于资源不足，该应用程序未配备针对残疾人的设置。 但是，这并不意味着它会一直这样。 最好事先做好准备，以节省将来的大量时间。")]),_._v(" "),e("p",[_._v("16.使用测试线束")]),_._v(" "),e("p",[_._v("测试工具使测试人员可以自动化多个测试案例的测试过程，并生成关联的测试报告。 测试工具基于两个主要部分； 测试引擎和测试脚本存储库。 测试工具是节省时间的好方法，因为测试引擎使流程自动化，从而提高了整个应用程序的质量。 测试工具也可以在调用网站上的功能以比较应用程序的行为之后生成报告。 如果您要进行自动浏览器测试（可以通过Windows Powershell轻松控制），则可以通过Selenium测试自动化来开发测试工具。")]),_._v(" "),e("p",[_._v("17.在云上执行自动浏览器测试")]),_._v(" "),e("p",[_._v("检查跨浏览器兼容性时面临的主要挑战之一是建立基础架构所需的资金，但即便如此，它也无法扩展。 例如，如果您想检查不同ios版本上的功能，则需要使用单独的设备。 这将进一步增加基础设施的总成本。")]),_._v(" "),e("p",[_._v("这是基于云的跨浏览器测试平台（例如Lambdatest）出现的地方。通过我们的2000+浏览器和操作系统的组合，您无需在基础架构上花费资金。 您可以使用要测试的配置来设置虚拟机。 您甚至可以使用我们选择的任何框架和语言来利用我们的Selenium Grid进行自动化的浏览器测试。")]),_._v(" "),e("p",[_._v("在云上进行网站测试有什么好处？")]),_._v(" "),e("p",[_._v("18.将屏幕截图与自动化浏览器测试进行比较")]),_._v(" "),e("p",[_._v("人非圣贤孰能！ 无论我们多么努力工作，都可能会遗漏一个或多个错误。 当我们谈论比较来自不同OS浏览器配置的屏幕截图时，这变得更加准确。 将一个图像与另一个图像进行比较可能会很麻烦且很耗时。 因此，最好执行智能的视觉UI测试，即LambdaTest功能，该功能可以自动比较多张图片并突出显示UI中的所有差异。")]),_._v(" "),e("p",[_._v("19.每个阶段的测试")]),_._v(" "),e("p",[_._v("即使在SDLC的后期阶段，确保遇到错误的一种方法是定期测试。 我们必须继续测试不同组合的新功能，这一点很重要。 作为开发人员，对代码执行单元测试应该成为例程的一部分。 当处理复杂的功能时，我们非常有必要将测试计划划分为多个阶段，从而避免任何依赖性。")]),_._v(" "),e("p",[_._v("立即在2000多种真实浏览器上对您的Web应用程序执行跨浏览器测试！")]),_._v(" "),e("p",[_._v("包起来！")]),_._v(" "),e("p",[_._v("为了使您的Web应用程序能够与Netflix这样的技术巨头相提并论，您需要加紧努力以达到他们的标准。 进行跨浏览器测试只是减少时间的一个步骤，同时还需要记住许多其他事项。 这是自动浏览器测试的需求所在，通过自动化测试方案，您可以节省一些时间来占用带宽，并专注于更重要的任务。")]),_._v(" "),e("p",[_._v("如果您在跨浏览器测试过程中有自己的有趣经历或想法可以节省时间，请随时在评论部分中分享。")])])}],!1,null,null,null);v.default=p.exports}}]);