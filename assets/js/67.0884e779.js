(window.webpackJsonp=window.webpackJsonp||[]).push([[67],{280:function(t,e,s){"use strict";s.r(e);var n=s(1),a=Object(n.a)({},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",{staticClass:"content"},[t._m(0),t._v(" "),s("p",[t._v("是如果你喜欢使用 HTTP 采样器，你可以使用。GraphQL 为维护测试计划提供了一种舒适和简单的方法标头图片来源中的徽标：Python，请求，JSON，HTTP\n这是有关如何使用python构建API框架的系列文章中的第二篇。\n您可以阅读下面的先前部分：\nPython API测试自动化框架（第1部分）简介，设置和安装\nPython API测试自动化框架（第2部分）发出HTTP请求\n任何测试自动化框架的组成部分都是如何执行断言。 您也可以说这是测试自动化的基本要素。 有没有看过一个没有断言的测试？ 🤔\n尽管您始终可以选择语言或测试框架的现成功能，甚至可以自己包装。 最好不要重新发明轮子☸️并利用好的断言库来节省您宝贵的实施时间，这总是一个好主意。\n对于python，有许多选项可用。 但是，我特别喜欢assertpy库，因为它具有流利的断言功能，而且它对使用本机python数据结构（例如list，set，dict等其他原始数据类型）具有出色的支持这一事实。\n它受到AssertJ库的极大启发，该库本身在Java社区中非常流行，并在许多流行的开源工具中使用.\n从流利的断言开始\n您可能会问，如何从使用assertpy的流畅断言开始？\n像其他任何python模块一样，您应该首先使用以下命令将其添加到虚拟环境中\npipenv安装assertpy\n另外，阅读详尽且写得很好的Github自述文件是一个很好的起点，因为它为您提供了assertpy可能实现的大量操作和方法列表。 您可以在assertpy / assertpy上了解更多\n基本断言\n让我们来看一些有关用例的基本断言，剩下的我将在遇到某些用例时留给您探讨。\n通常，浏览库的功能通常是一个好主意，这样您的大脑就可以记住是否已经了解到功能X，而这种行为可以帮助您解决将来的用例\n假设您要根据我们一直在关注的同一个人的响应将多个断言链接到一个特定的人：")]),t._v(" "),t._m(1),s("p",[t._v("记住，我们进行了从可用人员中提取名字的检查，然后添加了检查以查看肯特是否包含在其中：\nfirst_names = [people['fname'] for people in response_text]\nassert_that(first_names).contains('Kent')\n我们可以使用assertpy提供的功能，根据某个键从dict对象列表中提取列表，然后将多个断言链接在一起。 以上内容可以有效地替换为。\nassert_that(response_content).extracting('fname').is_not_empty().contains('Gaurav')")]),t._v(" "),s("p",[t._v("观察到我们能够对同一对象进行多次检查，并且读起来像英语句子一样流利。 🙌🏼\n另外，请注意，当断言失败时，我们将收到一条友好的人类可读错误消息，如下所示：\nAssertionError: Expected <['Kent', 'Bunny', 'Doug']> to contain item "),s("Gaurav",[t._v(", but did not.")])],1),t._v(" "),s("p",[t._v("将Gaurav替换为Kent以查看断言通过。\n您可以使用断言库执行的最常见操作是：\nis_equal_to, is_empty, contains, does_not_contain, matches")]),t._v(" "),s("p",[t._v("开箱即用的assertpy可以轻松地支持这些功能。\n打印自定义断言消息\n假设您要在断言失败时打印自己的自定义消息，可以使用description =“''关键字参数轻松地做到这一点\nassert_that(response.status_code, description='Person not created').is_equal_to(requests.codes.ok)")]),t._v(" "),s("p",[t._v("例如，我错误地将预期的响应代码从no_content修改为ok，并且assertpy提供了以下可读的堆栈跟踪以及我们提供的错误消息>       assert_that(response.status_code, description='Person not created').is_equal_to(requests.codes.ok)\nE       AssertionError: [Person not created] Expected <204> to be equal to <200>, but was not.")]),t._v(" "),s("p",[t._v("people_test.py:63: AssertionError\n软断言\n您还可以执行软断言（即不要在第一次失败时停止测试），而是在最后引发单个断言错误，为此，请确保使用soft_assertions（）函数和使用with子句的python上下文管理器\ndef test_read_all_has_kent():")]),t._v(" "),t._m(2),t._v(" "),s("p",[t._v("response = requests.get(BASE_URI)")]),t._v(" "),t._m(3),t._v(" "),t._m(4),t._v(" "),s("p",[t._v("with soft_assertions():\nassert_that(response.status_code).is_equal_to(requests.codes.no_content) # fails\n# We can get python dict as response by using .json() method\nresponse_content = response.json()")]),t._v(" "),t._m(5),t._v(" "),s("p",[t._v("在上面的示例中，我们故意修改了状态码声明和响应声明。\n下面是测试运行后的样子，我们看到两条断言消息都出现了。\n结论\n我希望您更好地了解专用的流利断言库如何使您的框架变得更好，并且希望您继续使用它们。 就是这个帖子。 在本系列的下一篇文章中，我们将看到如何使用XML和JSON数据类型。\n如果您认为这篇文章很有用，请与朋友或同事分享，如果您有想法，我很乐意在Twitter或评论中聊天。 直到下一次。 快乐的测试和编码。")]),t._v(" "),t._m(6),t._v(" "),s("p",[t._v("石头 磊哥 seven 随便叫")]),t._v(" "),t._m(7),t._v(" "),s("p",[t._v("thoughtworks（离职了。。。。）")]),t._v(" "),s("p",[t._v("大家好，本人不才，目前依旧混迹于thoughtworks，做着一名看起来像全栈的QA，兴趣爱好前端，目前是thoughtworks 西安QA社区的leader，如果有兴趣分享话题，或者想加入tw，可以找我")]),t._v(" "),t._m(8),t._v(" "),s("p",[t._v("QA（营生） dev（front-end dev 兴趣爱好）")]),t._v(" "),t._m(9),t._v(" "),s("p",[t._v("如果想转载或者高薪挖我 请直接联系我 哈哈")]),t._v(" "),t._m(10),t._v(" "),s("p",[t._v("qileiwangnan")]),t._v(" "),t._m(11),t._v(" "),s("p",[t._v("qileilove@gmail.com")])])},[function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"pythonapi测试自动化框架使用assertpy添加流畅断言"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#pythonapi测试自动化框架使用assertpy添加流畅断言","aria-hidden":"true"}},[this._v("#")]),this._v(" PythonAPI测试自动化框架使用assertpy添加流畅断言")])},function(){var t=this.$createElement,e=this._self._c||t;return e("div",{staticClass:"language- extra-class"},[e("pre",{pre:!0,attrs:{class:"language-text"}},[e("code",[this._v('[\n    {\n        "fname": "Kent",\n        "lname": "Brockman",\n        "person_id": 2,\n        "timestamp": "2020-12-01T16:50:36.843495"\n    },\n    {\n        "fname": "Bunny",\n        "lname": "Easter",\n        "person_id": 3,\n        "timestamp": "2020-12-01T16:50:36.843706"\n\t}\n\t...\n]\n')])])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"we-use-requests-get-with-url-to-make-a-get-request"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#we-use-requests-get-with-url-to-make-a-get-request","aria-hidden":"true"}},[this._v("#")]),this._v(" We use requests.get() with url to make a get request")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"response-from-requests-has-many-useful-properties"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#response-from-requests-has-many-useful-properties","aria-hidden":"true"}},[this._v("#")]),this._v(" response from requests has many useful properties")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h1",{attrs:{id:"we-can-assert-on-the-response-status-code"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#we-can-assert-on-the-response-status-code","aria-hidden":"true"}},[this._v("#")]),this._v(" we can assert on the response status code")])},function(){var t=this.$createElement,e=this._self._c||t;return e("pre",[e("code",[this._v("   # Use assertpy's fluent assertions to extract all fnames and then see the result is non empty and has\n   # Kent in it.\n   assert_that(response_content).extracting('fname').is_not_empty().does_not_contain('Kent') # fails\n")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"author"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#author","aria-hidden":"true"}},[this._v("#")]),this._v(" author")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"company"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#company","aria-hidden":"true"}},[this._v("#")]),this._v(" company")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"roles"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#roles","aria-hidden":"true"}},[this._v("#")]),this._v(" roles")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h3",{attrs:{id:"联系方式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#联系方式","aria-hidden":"true"}},[this._v("#")]),this._v(" 联系方式")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"wechat"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#wechat","aria-hidden":"true"}},[this._v("#")]),this._v(" wechat:")])},function(){var t=this.$createElement,e=this._self._c||t;return e("h4",{attrs:{id:"email"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#email","aria-hidden":"true"}},[this._v("#")]),this._v(" email:")])}],!1,null,null,null);e.default=a.exports}}]);