(window.webpackJsonp=window.webpackJsonp||[]).push([[134],{347:function(v,_,p){"use strict";p.r(_);var e=p(1),r=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var v=this,_=v.$createElement,p=v._self._c||_;return p("div",{staticClass:"content"},[p("p",[v._v("如何重用功能测试进行性能测试")]),v._v(" "),p("p",[v._v("在过去的两年中，我听到很多关于使用基于UI浏览器的自动化工具进行性能测试的讨论，这些协议可以替代协议级别的JMeter和LoadRunner等更传统的负载测试工具。")]),v._v(" "),p("p",[v._v("但为什么？")]),v._v(" "),p("p",[v._v("单用户性能")]),v._v(" "),p("p",[v._v("在开始讨论之前，让我们先讨论一下单用户性能。")]),v._v(" "),p("p",[v._v("PerfBytes的James Pulley在我们上次的TestGuild Performance播客中提醒我，大多数工程师只专注于其应用程序对许多并发用户的性能。 但是，有多少人可以回答这个问题：“它可以缩放吗？”\n该功能是否满足单个用户的性能要求？")]),v._v(" "),p("p",[v._v("请记住，在基本级别上，几乎所有功能测试工具都内置有计时器结构。")]),v._v(" "),p("p",[v._v("因此，为什么不利用它并问一个问题：“页面速度有多快？ 反应有多快？” 跟踪并报告。")]),v._v(" "),p("p",[v._v("如果这样做，您很有可能会在测试周期中更早地发现您的代码不一定具有高性能。")]),v._v(" "),p("p",[v._v("这是我在上一份工作中喜欢使用Serenity框架的原因之一。 运行我的测试套件后，Serenity会自动生成全面的报告。 该报告包含运行每个测试所花费的总时间。")]),v._v(" "),p("p",[v._v("https://testguild.com/reuse-performance/\n将这些数据发送到自动化仪表板使我能够跟踪一段时间内单个测试的运行时间。")]),v._v(" "),p("p",[v._v("这样可以轻松查看图表并找出在每次冲刺后我们的应用程序中可能存在性能问题的潜在区域，并确定是否有任何新功能引起了问题。")]),v._v(" "),p("p",[v._v("其他框架很可能具有类似的功能。")]),v._v(" "),p("p",[v._v("如何捕获实际的网络时间？")]),v._v(" "),p("p",[v._v("此外，赛普拉斯（Cypress）等功能测试工具还提供了有关如何在测试运行中捕获Google Chrome性能数据的示例。 这样，您就可以查找和修复诸如到第一个字节的时间很慢的问题。")]),v._v(" "),p("p",[v._v("Selenium也有几种捕获性能数据的方法。 一种常见的方法是使用HAR文件。 HTTP存档格式或HAR，是JSON格式的存档文件格式，用于记录Web浏览器与站点的交互。")]),v._v(" "),p("p",[v._v("一个示例就是利用开源的BrowserMob代理（BMP）。 BMP允许您处理HTTP请求和响应，捕获HTTP内容以及将性能数据导出为HAR文件。")]),v._v(" "),p("p",[v._v("BMP可以作为独立的代理服务器很好地工作，但是当嵌入Selenium测试中时，它尤其有用。 拥有HAR文件后，您可以将该文件上传到仪表板解决方案（例如Elastic Stack）并分析结果。")]),v._v(" "),p("p",[v._v("安德鲁·克鲁格（Andrew Krug）在我们过去的PerfGuild在线会议上举行了一次会议，确切地说明了如何执行此操作。")]),v._v(" "),p("p",[v._v("如果您已经在使用SauceLabs运行测试套件，那就是好消息！")]),v._v(" "),p("p",[v._v("SauceLabs发布了一项新功能，可帮助您监视应用程序的前端性能。 要开始在SauceLabs中捕获性能值，您需要做的就是向现有WebDriver测试中添加两个新功能。")]),v._v(" "),p("p",[v._v("要了解更多信息，请查看我关于使用SauceLabs进行性能测试的文章。")]),v._v(" "),p("p",[v._v("浏览器与协议级性能脚本")]),v._v(" "),p("p",[v._v("显然，随着现代软件的开发，越来越多的公司正在寻找方法来利用功能测试工具进行压力和负载测试活动。")]),v._v(" "),p("p",[v._v("为什么？")]),v._v(" "),p("p",[v._v("有些人可能想知道为什么他们不应该只使用基于非UI的协议。")]),v._v(" "),p("p",[v._v("像Angular和React这样的现代JavaScript前端框架使在协议级别创建性能脚本变得非常困难，这是90年代中期以来测试人员创建性能测试的传统方式。")]),v._v(" "),p("p",[v._v("事实是，当前大多数Web应用程序都是单页应用程序，因此使用了许多客户端业务逻辑。")]),v._v(" "),p("p",[v._v("在这种情况下，UI和服务器之间不会像在典型的较旧的客户端-服务器应用程序体系结构中那样发生交互。")]),v._v(" "),p("p",[v._v("使用协议工具，您还必须执行其他脚本和编程来捕获这些类型的事务。")]),v._v(" "),p("p",[v._v("因此，设置脚本的过程变得越来越困难。")]),v._v(" "),p("p",[v._v("虽然我同意协议级性能是最佳方法，但由于不必花太多时间去解决如何在Winsock中编写脚本的问题，因此还有很多话要说。")]),v._v(" "),p("p",[v._v("请记住：负载测试只是达到目的的一种手段。")]),v._v(" "),p("p",[v._v("主要目标是观察负载下的性能，例如弹性，可用性，可靠性和可伸缩性。")]),v._v(" "),p("p",[v._v("您要做的是在那些尺寸上完成负载测试工作的所有方面。")]),v._v(" "),p("p",[v._v("要对它们执行某些操作，首先必须能够模拟负载。 这就是我看到许多新老用户都在性能测试上花费过多时间的地方。")]),v._v(" "),p("p",[v._v("基于浏览器的性能脚本创建的好处")]),v._v(" "),p("p",[v._v("基于浏览器的性能脚本创建的好处")]),v._v(" "),p("p",[v._v("以我的经验，测试人员花费大量时间在协议级别上构建和维护负载测试脚本，以模拟这种需求。")]),v._v(" "),p("p",[v._v("这全是执行和分析的代价，这就是负载测试的重点（也是我们应该花费大部分时间的地方。但是，不幸的是，我们有点沉迷于负载测试创建的巨大漏洞。")]),v._v(" "),p("p",[v._v("通过专注于基于浏览器的性能脚本创建，您将花费更少的时间进行其他其他手动编辑，关联和编程，而这对于使用基于协议的记录工具是必需的。")]),v._v(" "),p("p",[v._v("此外，由于此方法使用的是真实的浏览器，并且更多的人熟悉与实际的浏览器（而不是协议）进行交互，因此有助于将性能活动转移给更多团队可能应该参与的活动。")]),v._v(" "),p("p",[v._v("从协议转移到浏览器性能观念")]),v._v(" "),p("p",[v._v("计划协议级负载测试和基于浏览器的负载测试的方法几乎相同。")]),v._v(" "),p("p",[v._v("在分析阶段稍有不同的地方。")]),v._v(" "),p("p",[v._v("SmartBear产品经理Keshav Vasudevan认为，分析结果时必须有不同的心态，这是至关重要的，因为从基于浏览器的方法中获得的指标在传统上可能与您以前在其中看到的某些指标有所不同。 基于协议的方法。")]),v._v(" "),p("p",[v._v("Keshav建议使用一个三级框架来提供帮助。")]),v._v(" "),p("p",[v._v("一级")]),v._v(" "),p("p",[v._v("他建议的KPI首先是从最终用户角度看结果。")]),v._v(" "),p("p",[v._v("这涉及查看诸如所有这些浏览器在负载测试的任何给定点花费多长时间来执行您在脚本中定义的所有操作之类的事情。")]),v._v(" "),p("p",[v._v("举例来说，假设负载测试经过50秒，您就意识到一个虚拟用户完成一项特定交易大约需要10秒。")]),v._v(" "),p("p",[v._v("因此，您可以从确定某些趋势开始，例如发现实际用户实际使用该应用程序的方式。")]),v._v(" "),p("p",[v._v("因为这是一个真实的浏览器测试，所以您可以发现薄片的一些异常趋势，例如时间是否存在峰值，是否需要执行这些事务以及确定可能导致性能下降的页面。")]),v._v(" "),p("p",[v._v("第二级")]),v._v(" "),p("p",[v._v("第二级是关于航行时间的。")]),v._v(" "),p("p",[v._v("这是使用基于浏览器的测试方法的另一个优势，因为您获得的大多数基于浏览器的指标通常是在传统的基于协议的工具中找不到的。")]),v._v(" "),p("p",[v._v("例如，您现在可以跟踪DNS时间，下载时间，在网络上处理所有图像，字体等并将其呈现为DOM所花费的时间。")]),v._v(" "),p("p",[v._v("可能与浏览器相关的任何事件时间，例如执行JavaScript函数，响应时间，到第一个字节的时间，以及作为整体导航时间一部分的其他指标。")]),v._v(" "),p("p",[v._v("您可能会看到是否正在识别任何有趣的趋势，并将其与您在虚拟用户进行交易所需的持续时间内识别出的异常模式相关联。")]),v._v(" "),p("p",[v._v("例如，假设DNS时间过长。")]),v._v(" "),p("p",[v._v("DNS查找中可能存在问题。 也许DOM加载时间太长。 或者，也许您的应用程序中有某些资源需要一段时间才能使浏览器在任何给定的瞬间进行处理。")]),v._v(" "),p("p",[v._v("三级")]),v._v(" "),p("p",[v._v("在确定某些关键行为之后，下一个层次是查看浏览器本身处理所有这些资源所花费的时间，并从本质上确定那里是否存在任何异常趋势。")]),v._v(" "),p("p",[v._v("一旦完成所有三个级别，您就可以识别出可能出现问题的特定关键趋势，并找到解决方法。")]),v._v(" "),p("p",[v._v("这种方法的另一个好处是，您从基于浏览器的方法中获得的结果通常是开发人员在开发和构建应用程序时习惯使用的结果。")]),v._v(" "),p("p",[v._v("这样可以更轻松地诊断问题。 这也使与开发人员联系更容易，并问：“嘿，这就是我认为的问题所在。 我们为什么不共同解决呢？")]),v._v(" "),p("p",[v._v("基于浏览器的压力测试工具")]),v._v(" "),p("p",[v._v("您可以通过哪些方式将功能测试用于多于一个用户的性能测试活动？")]),v._v(" "),p("p",[v._v("以下是一些可以提供帮助的工具。")]),v._v(" "),p("p",[v._v("Flood.io元素")]),v._v(" "),p("p",[v._v("Element是使用基于浏览器的负载测试工具的开源Puppeteer。 您可以使用Typescript创建脚本，并可以按照与客户相同的方式在Web应用程序上使用脚本，打开浏览器并与页面元素进行交互。")]),v._v(" "),p("p",[v._v("它的编写就像一个功能测试脚本，但是在Flood的帮助下，您可以在云中所需的任意多个节点上快速运行负载测试。")]),v._v(" "),p("p",[v._v("忍者")]),v._v(" "),p("p",[v._v("LoadNinja使您能够从浏览器的角度创建测试脚本，这意味着您可以从最终用户创建和捕获事务，而最终用户则直接从浏览器与应用程序进行交互。")]),v._v(" "),p("p",[v._v("过去，分解数百个基于浏览器的测试消耗了大量资源。 借助LoadNinja，他们已经能够完善这种机制，从而在保持成本效益的同时，快速启动成千上万个真正的浏览器。")]),v._v(" "),p("p",[v._v("LoadNinja还可以使用某些机器学习算法来分析您所有基于网络的信息。")]),v._v(" "),p("p",[v._v("金牛座")]),v._v(" "),p("p",[v._v("Taurus使您能够将现有的Selenium脚本转换为JMeter JMX文件。")]),v._v(" "),p("p",[v._v("Taurus提供了一个基于JMeter的开源自动化框架，它将把任何东西转换成任何东西。 因此，您可以为其提供一个Selenium脚本进行功能测试，并且无需编写任何代码即可从另一端生成JMeter脚本。")]),v._v(" "),p("p",[v._v("一些团队通过Taurus运行所有功能测试，以创建其非功能测试。")]),v._v(" "),p("p",[v._v("硒到JMeter")]),v._v(" "),p("p",[v._v("如果您使用之前通过Selenium测试创建的HAR文件，则实际上可以将其转换为JMX，这是JMeter的格式化测试计划。 请查看Flood.io的文章，将HAR文件转换为JMeter测试计划，这将向您展示如何执行此计划。")]),v._v(" "),p("p",[v._v("基于浏览器的一切自动化")]),v._v(" "),p("p",[v._v("这种方法适合所有人吗？ 一言以蔽之。")]),v._v(" "),p("p",[v._v("如果您不使用JavaScript密集型前端，而所有业务逻辑都在后端，则应坚持进行协议级性能测试。")]),v._v(" "),p("p",[v._v("尽管可能很难创建协议级性能脚本，但我发现它们比Selenium脚本更可靠。")]),v._v(" "),p("p",[v._v("但是，当然，每个团队都是不同的。")]),v._v(" "),p("p",[v._v("性能驱动开发（PDD）")]),v._v(" "),p("p",[v._v("掌握工具和技术很容易，但是在构建应用程序时，您应该更加注重性能。")]),v._v(" "),p("p",[v._v("最终，您希望您的应用程序能够推动业务发展。")]),v._v(" "),p("p",[v._v("消费者越来越不耐烦了。 如果您的年龄足以记住15到20年前，那么您很乐意等待20秒才能加载视频。")]),v._v(" "),p("p",[v._v("如今，如果视频在两秒钟之内无法加载，您将转到下一页或下一视频。")]),v._v(" "),p("p",[v._v("您的交换成本正在降低。")]),v._v(" "),p("p",[v._v("对于软件团队而言，对性能驱动的开发保持开放的态度至关重要。")]),v._v(" "),p("p",[v._v("从代码优化层开始考虑性能。 当您实际定义和构建UI，然后启动它并使用所有可能会或可能不会加总应用程序总加载时间的所有那些不同框架时。")]),v._v(" "),p("p",[v._v("对什么是最佳实践以及当前存在的最佳工具持开放态度。")]),v._v(" "),p("p",[v._v("基于UI的负载测试无法解决所有问题。")]),v._v(" "),p("p",[v._v("基于协议的负载测试也不能解决所有问题。")]),v._v(" "),p("p",[v._v("总是会有付出和接受。")]),v._v(" "),p("p",[v._v("您和您的团队，作为一个完整的测试组织，需要定义对您最重要的内容。")]),v._v(" "),p("p",[v._v("每个人的表现")]),v._v(" "),p("p",[v._v("最后，我认为性能测试不是只有少数人可以使用的工具，而应该是所有人都可以使用的工具。")]),v._v(" "),p("p",[v._v("每个人都应该能够至少在一定程度上成功地进行性能测试，并希望在应用程序生命周期中的开发过程中实现端到端性能的全面发展。")]),v._v(" "),p("p",[v._v("在线性能测试会议")]),v._v(" "),p("p",[v._v("是否真的想将您的性能测试提升到一个新的水平？")]),v._v(" "),p("p",[v._v("请确保签出并注册我们的下一次PerfGuild在线会议，该会议将100％致力于帮助您成功完成所有性能测试工作。")])])}],!1,null,null,null);_.default=r.exports}}]);