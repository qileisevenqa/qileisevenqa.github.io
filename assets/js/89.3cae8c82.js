(window.webpackJsonp=window.webpackJsonp||[]).push([[89],{302:function(t,v,_){"use strict";_.r(v);var e=_(1),s=Object(e.a)({},function(){this.$createElement;this._self._c;return this._m(0)},[function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("div",{staticClass:"content"},[_("p",[t._v('view: post\nlayout: post                          # Only in unique we use the "layout: post"\nlang: zh                              # Lang is required\nauthor:\ntitle: 2020年Selenium自动化的顶级Python测试框架\ndescription:\nexcerpt:\ncover: true\ncoverAlt: /home.jpg\ndemo:\ncategories:')]),t._v(" "),_("ul",[_("li",[t._v("Agile QA\ntags:")]),t._v(" "),_("li",[t._v("Agile_QA")]),t._v(" "),_("li",[t._v("Agile testing")]),t._v(" "),_("li",[t._v("QA\ncreated_at: 2019-12-26 09:00\nupdated_at: 2016-11-26 09:00\nmeta:\n# If you have cover image")]),t._v(" "),_("li",[t._v("property: og:image\ncontent: /autores/my.jpeg")]),t._v(" "),_("li",[t._v("name: twitter:image\ncontent: /autores/my.jpeg")])]),t._v(" "),_("hr"),t._v(" "),_("h1",{attrs:{id:"_2020年selenium自动化的顶级python测试框架"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2020年selenium自动化的顶级python测试框架","aria-hidden":"true"}},[t._v("#")]),t._v(" 2020年Selenium自动化的顶级Python测试框架")]),t._v(" "),_("p",[t._v("根据StackoverFlow的《开发人员调查》，Python是2019年增长最快的编程语言。 在整体排名上，它甚至超过了Java，仅在Rust之后排名第二，成为最受欢迎的语言。 Python普及的几个原因之一是对测试自动化框架的广泛支持。 大多数流行的Python框架都与Selenium测试自动化框架兼容，并用于自动化浏览器测试和跨浏览器测试")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://www.lambdatest.com/blog/wp-content/uploads/2020/04/GIF-min.gif",alt:"GIF"}})]),t._v(" "),_("p",[t._v("随着Python测试框架的增加，有必要选择适合您需求的理想的Selenium测试自动化框架。除了默认的Python测试框架unittest(或PyUnit)之外，还有更多的框架可供选择。")]),t._v(" "),_("p",[t._v("下面是实现您的Selenium测试自动化需求的顶级Python测试框架。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://www.lambdatest.com/blog/wp-content/uploads/2020/04/Pytest-min.png",alt:"Pytest"}})]),t._v(" "),_("p",[t._v("PyTest是一个开源的Python测试框架，主要用于单元测试。这个特殊的Python测试框架是可扩展的，因为它对编写简单的自动化测试以及为应用程序和库编写复杂的功能测试都很有用。从PyTest开始很容易。它与Python 3.5+和PyPy 3兼容。")]),t._v(" "),_("p",[t._v("使用PyTest编写的测试套件更加紧凑，因为不需要大量样板代码，也不需要将测试包含到大型测试类中。与默认的Python测试框架不同，它要求测试以test开始(或以test结束)，PyTest中没有固定的测试用例术语。这是因为PyTest具有支持自动发现测试模块和函数的内置特性。")]),t._v(" "),_("p",[t._v("由于引入了断言重写的有用功能，该信息有助于提供有关失败的断言语句的详细信息，因此无需记住self.assert *名称。")]),t._v(" "),_("p",[_("strong",[t._v("PyTest Official Website")]),t._v(" – https://www.pytest.org/")]),t._v(" "),_("p",[_("strong",[t._v("PyTest on GitHub")]),t._v(" – https://github.com/pytest-dev/pytest/")]),t._v(" "),_("p",[t._v("Here are the details about the PyTest project:")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("Forks – 1.3K")]),t._v(" "),_("th",[t._v("Pull Requests – 49")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Starred – 5.7K")]),t._v(" "),_("td",[t._v("Contributors – 504")])]),t._v(" "),_("tr",[_("td",[t._v("Used by – 161K")]),t._v(" "),_("td",[t._v("Commits – 12,079")])])])]),t._v(" "),_("h2",{attrs:{id:"先决条件是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#先决条件是什么","aria-hidden":"true"}},[t._v("#")]),t._v(" 先决条件是什么?")]),t._v(" "),_("p",[t._v("关于PyTest框架，最好的部分是它涉及柔和的学习曲线。 使用PyTest很容易上手，尤其是如果您具有任何现有Python测试框架的工作知识。")]),t._v(" "),_("p",[t._v("您只需要一个Python IDE进行开发，就可以使用Python包管理器来安装PyTest。")]),t._v(" "),_("p",[t._v("验证试验；保证试验；安全试验")]),t._v(" "),_("p",[t._v("PyTest框架有很多优点，主要如下所示")]),t._v(" "),_("p",[t._v("它与其他Python测试框架（例如unittest（或PyUnit））兼容。")]),t._v(" "),_("p",[t._v("除了简单的测试，PyTest还可以用于创建复杂的功能测试用例。")]),t._v(" "),_("p",[t._v("使用其他Python测试框架将现有实现移植到PyTest所需的精力更少。")]),t._v(" "),_("p",[t._v("PyTest可用于实践TDD（测试驱动开发）的项目以及开源项目。")]),t._v(" "),_("p",[t._v("由于PyTest支持参数化，因此有助于创建有效的测试用例（和测试套件）。 使用参数化，可以用不同的输入配置执行测试用例，从而使代码重复最少。")]),t._v(" "),_("p",[t._v("使用PyTest进行的测试很容易理解，因为模板代码很少。")]),t._v(" "),_("p",[t._v("它支持固定装置和类，因为在模块/类/功能/会话的生命周期中可以使用常见的测试对象。")]),t._v(" "),_("p",[t._v("PyTest是可扩展的，该框架已经具有丰富的插件架构。 当前有315+个带有PyTest的外部插件。")]),t._v(" "),_("p",[t._v("它通过pytest-xdist插件支持并行测试执行。")]),t._v(" "),_("p",[t._v("PyTest中的断言提供有关失败方案的详细信息。")]),t._v(" "),_("p",[t._v("PyTest的缺点")]),t._v(" "),_("p",[t._v("PyTest与其他Selenium Python测试框架不兼容，因为它使用自己的特殊例程进行开发。 重写完整的代码是使用PyTest将现有实现移植到其他Python测试框架的唯一方法。")]),t._v(" "),_("p",[t._v("PyTest是最适合您的Python测试框架吗？")]),t._v(" "),_("p",[t._v("如果您要开发复杂的功能测试，则可以选择默认的Selenium Python框架（即单元测试）作为PyTest。 夹具，类以及参数化对于自动化测试开发可能非常方便。")]),t._v(" "),_("p",[t._v("使用Pytest和Selenium WebDriver进行测试自动化")]),t._v(" "),_("h2",{attrs:{id:"_2-behave"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_2-behave","aria-hidden":"true"}},[t._v("#")]),t._v(" 2. Behave")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://www.lambdatest.com/blog/wp-content/uploads/2020/04/Behave-min.png",alt:"Behave"}})]),t._v(" "),_("p",[t._v("行为是BDD（业务驱动开发）测试中广泛使用的Selenium Python测试框架之一。 行为将使用Gherkin语言来开发场景和功能文件。 由于Gherkin将简单易读的语言用于测试用例开发，因此还可以为团队中的非技术人员创建测试。")]),t._v(" "),_("p",[t._v("随着工程师，经理，质量分析师，业务开发经理等之间的协作不断增强，使用BDD框架可以使团队成员之间更好地进行沟通。 如果您对其他BDD框架（例如SpecFlow，Cucumber，Cucumber-JVM等）有一定的了解，那么从像Behave这样的行为驱动框架开始就相对容易。")]),t._v(" "),_("p",[t._v("由于Behave是BDD框架，因此与其他Selenium Python测试框架（例如unittest（或PyUnit），PyTest等）根本不同。Behave的最新版本是1.2.7.dev1。")]),t._v(" "),_("p",[t._v("行为官方网站– https://behave.readthedocs.io/en/latest/")]),t._v(" "),_("p",[t._v("在GitHub上进行操作– https://github.com/behave/behave")]),t._v(" "),_("p",[t._v("以下是有关“行为”框架的详细信息：")]),t._v(" "),_("p",[t._v("有哪些先决条件？")]),t._v(" "),_("p",[t._v("安装Behave要求使用2.7.14以上的Python。 拥有任何BDD工具的先前经验可以很容易地开始使用Behave框架。")]),t._v(" "),_("p",[t._v("行为的优点")]),t._v(" "),_("p",[t._v("这是将Behave框架用于Selenium测试自动化的优点：")]),t._v(" "),_("p",[t._v("如果团队具有任何现有BDD框架（例如SpecFlow，Cucumber等）的经验，则可以很容易地进行升级。")]),t._v(" "),_("p",[t._v("环境功能，配置设置，固定装置等的可用性使安装和清理变得容易。")]),t._v(" "),_("p",[t._v("PyCharm（专业版）支持行为。")]),t._v(" "),_("p",[t._v("它支持与其他Web框架（如Django和Flask）的集成。")]),t._v(" "),_("p",[t._v("它具有出色的支持文档和教程，可帮助您开始行为框架。")]),t._v(" "),_("p",[t._v("由于测试包含不同的方案步骤，方案结果，功能文件等，因此添加新的测试用例更加容易。")]),t._v(" "),_("p",[t._v("除技术人员外，非技术人员在测试用例（或测试方案）的开发中也可以发挥至关重要的作用。")]),t._v(" "),_("p",[t._v("行为的缺点")]),t._v(" "),_("p",[t._v("以下是在Selenium测试自动化中使用行为框架的一些主要缺点：")]),t._v(" "),_("p",[t._v("PyCharm（社区版）不支持此功能。")]),t._v(" "),_("p",[t._v("在“行为”中的不同功能文件（* .feature）之间共享场景步骤（* _steps.py）非常困难。")]),t._v(" "),_("p",[t._v("没有对并行测试执行的内置支持，这是自动浏览器测试的主要要求之一。 并行测试执行的解决方法需要安装其他软件，如此处和此处的常见讨论主题所述。")]),t._v(" "),_("p",[t._v("行为只能用于黑盒测试。")]),t._v(" "),_("p",[t._v("现在不推荐使用行为并行插件，该插件促进了行为的并行测试执行。")]),t._v(" "),_("p",[t._v("是最适合您的Python测试框架吗？")]),t._v(" "),_("p",[t._v("行为框架适合于Web测试，因为可以使用简单的英语语言开发测试场景。 另一方面，行为对于集成测试不是理想的，因为冗长可能导致测试方案不必要的复杂化。")]),t._v(" "),_("p",[t._v("许多开发人员更喜欢pytest-bdd，它是pytest.runner的BDD库，因为它使用了pytest中提供的良好功能，因此适合进行BDD测试。")]),t._v(" "),_("p",[t._v("在LambdaTest Selenium Grid上运行行为自动化脚本")]),t._v(" "),_("p",[t._v("3.机器人")]),t._v(" "),_("p",[t._v("Robot是另一个广泛使用的Python测试框架，用于Selenium测试自动化，RPA（机器人流程自动化）和ATDD（验收测试驱动开发）。 它是一个开源且可扩展的框架。 它可以轻松地与任何其他工具集成，因此非常适合创建灵活的自动化测试解决方案。")]),t._v(" "),_("p",[t._v("该框架与操作系统和应用程序无关，即，相同的实现在不同的平台（Windows，Linux和MacOS）之间兼容。 Robot框架的语法易于理解，因为它使用了易于理解的关键字。 可以通过在Selenium中使用Python实现的库来扩展Robot框架的功能。 它具有丰富的生态系统，其中包含作为单独项目开发的库和工具。")]),t._v(" "),_("p",[t._v("机器人官方网站-https://robotframework.org/")]),t._v(" "),_("p",[t._v("GitHub上的机器人-https://github.com/robotframework/robotframework")]),t._v(" "),_("p",[t._v("以下是有关机器人框架的详细信息：")]),t._v(" "),_("p",[t._v("Here are the details about the Robot framework:")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("Forks – 1.4K")]),t._v(" "),_("th",[t._v("Pull Requests – 51")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Starred – 4.4K")]),t._v(" "),_("td",[t._v("Contributors – 105")])]),t._v(" "),_("tr",[_("td",[t._v("Releases – 87")]),t._v(" "),_("td",[t._v("Commits – 12,224")])])])]),t._v(" "),_("p",[t._v("有哪些先决条件？")]),t._v(" "),_("p",[t._v("如果您安装了Python版本2.7.14或更高版本，则可以使用Robot Framework。 Python Package Manager（pip）命令用于安装Python测试框架。")]),t._v(" "),_("p",[t._v("机器人框架的优点")]),t._v(" "),_("p",[t._v("这是将Robot框架用于Selenium测试自动化的优点：")]),t._v(" "),_("p",[t._v("您不需要编程知识就可以使用Robot框架编写测试用例。")]),t._v(" "),_("p",[t._v("由于该框架是平台和应用程序无关的，因此在将代码从一个平台执行到另一个平台时，无需进行任何移植工作。")]),t._v(" "),_("p",[t._v("它可用于BDD，ATDD和关键字驱动的Selenium测试自动化。")]),t._v(" "),_("p",[t._v("使用Robot框架很容易上手，因为可以轻松使用测试数据语法。")]),t._v(" "),_("p",[t._v("机器人框架具有丰富的图书馆生态系统，例如 用于移动自动化的Appium，用于DB测试的数据库库等，用于测试不同的应用程序。")]),t._v(" "),_("p",[t._v("它具有良好的内置报告机制，因为每次构建后都会生成HTML日志。")]),t._v(" "),_("p",[t._v("机器人的缺点")]),t._v(" "),_("p",[t._v("以下是使用机器人框架的一些主要缺点：")]),t._v(" "),_("p",[t._v("没有对并行测试执行的内置支持。")]),t._v(" "),_("p",[t._v("创建定制的HTML报告并非易事。")]),t._v(" "),_("p",[t._v("机器人是最适合您的Python测试框架吗？")]),t._v(" "),_("p",[t._v("由于其丰富的库集和简单的语法，与PyUnit（或unittest）和PyTest相比，Robot框架更易于使用。 如果我们正在为ATDD寻找理想的Python自动化框架，则应该选择Robot框架。")]),t._v(" "),_("h2",{attrs:{id:"pyunit-or-unittest"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#pyunit-or-unittest","aria-hidden":"true"}},[t._v("#")]),t._v(" PyUnit (or unittest)")]),t._v(" "),_("p",[t._v("PyUnit（也称为unittest）是默认的Python测试框架，它是Python标准库的一部分。 该框架受到JUnit框架的启发。 这是自Python 2.1版发布以来所提供的unittest模块的一部分。")]),t._v(" "),_("p",[t._v("由于可以使用现成的单元测试Python测试框架，因此许多开始使用Selenium测试自动化的开发人员都喜欢单元测试框架。 测试用例遵循特定的命名法，其中测试以test_开头或以_test结尾。")]),t._v(" "),_("p",[t._v("TestCase是包含断言方法，SetUp和TearDown例程的基类。 可以将多个测试用例组合在一起以形成TestSuite类并构建自定义的测试运行器。")]),t._v(" "),_("p",[t._v("有哪些先决条件？")]),t._v(" "),_("p",[t._v("由于PyUnit框架可与Python测试框架一起使用，因此不需要任何其他软件包安装。")]),t._v(" "),_("p",[t._v("PyUnit（或单元测试）的优点")]),t._v(" "),_("p",[t._v("以下是PyUnit框架的一些优点：")]),t._v(" "),_("p",[t._v("由于PyUnit是xUnit框架的派生产品，并且与xUnit框架具有明显的相似性，因此Python中的新手开发人员还发现，很容易入门unittest框架。")]),t._v(" "),_("p",[t._v("无需其他软件包安装。")]),t._v(" "),_("p",[t._v("测试方案可以独立执行，也可以组合成一个TestSuite。 执行过程很简单，因为只能通过在终端上提及测试的名称来执行测试。")]),t._v(" "),_("p",[t._v("默认执行输出简洁明了。 这个Python测试框架还具有许多命令行选项，可帮助提供更详细的输出。")]),t._v(" "),_("p",[t._v("测试报告的生成速度非常快，只需几毫秒。")]),t._v(" "),_("p",[t._v("PyUnit（或单元测试）的缺点")]),t._v(" "),_("p",[t._v("这是PyUnit框架的一些主要缺点：")]),t._v(" "),_("p",[t._v("测试用例的命名仍然基于Java中使用的camelCase命名约定。")]),t._v(" "),_("p",[t._v("大量的样板代码用于测试实现。")]),t._v(" "),_("p",[t._v("没有颜色输出的规定。")]),t._v(" "),_("p",[t._v("PyUnit是您最佳的Python自动化框架吗？")]),t._v(" "),_("p",[t._v("由于PyUnit（或单元测试）是Python附带的默认Selenium Python框架，因此大多数开发人员都开始使用PyUnit进行Python旅程的自动化测试。 太多的样板代码和对太多抽象的支持，是在大型项目中使用该框架的主要障碍。")]),t._v(" "),_("p",[t._v("了解如何使用PyUnit进行Selenium Python测试。")]),t._v(" "),_("h2",{attrs:{id:"_5-lettuce"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_5-lettuce","aria-hidden":"true"}},[t._v("#")]),t._v(" 5. Lettuce")]),t._v(" "),_("p",[t._v("Lettuce是一个Python测试框架，可促进BDD测试。 它从Cucumber（为Ruby设计）中汲取了灵感。 生菜的发行名称受绿色环保的启发。 生菜的最新版本是0.2.23，被称为K石。")]),t._v(" "),_("p",[t._v("这个特定的Python测试框架是开源的，托管在GitHub上。 如其官方网站所述，Lettuce的开发目的是使测试变得轻松有趣。")]),t._v(" "),_("p",[t._v("生菜官方网站– http://lettuce.it/")]),t._v(" "),_("p",[t._v("GitHub上的生菜– https://github.com/gabrielfalcao/lettuce")]),t._v(" "),_("p",[t._v("以下是有关Lettuce框架的详细信息：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("Forks – 335")]),t._v(" "),_("th",[t._v("Pull Requests – 18")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Starred – 1.2K")]),t._v(" "),_("td",[t._v("Contributors – 81")])]),t._v(" "),_("tr",[_("td",[t._v("Releases – 63")]),t._v(" "),_("td",[t._v("Commits – 967")])])])]),t._v(" "),_("p",[t._v("有哪些先决条件？")]),t._v(" "),_("p",[t._v("可以使用Python软件包管理器（pip）安装Lettuce。 前提条件是Python 2.7.14（或更高版本）。")]),t._v(" "),_("p",[t._v("生菜的优点")]),t._v(" "),_("p",[t._v("这是Lettuce框架的一些优点：")]),t._v(" "),_("p",[t._v("与其他促进BDD的Python测试框架（如Behave）一样，Lettuce也使用Gherkin语言创建方案和功能文件。 如果您具有任何BDD测试工具的使用经验，那么Lettuce的入门非常容易。")]),t._v(" "),_("p",[t._v("除开发人员和其他技术人员外，其他项目涉众，即市场人员，项目经理等，也可以在测试过程中扮演重要角色。")]),t._v(" "),_("p",[t._v("添加新的测试用例很容易，因为功能文件和方案文件中需要主要更新。")]),t._v(" "),_("p",[t._v("生菜的缺点")]),t._v(" "),_("p",[t._v("这是Lettuce框架的一些主要缺点：")]),t._v(" "),_("p",[t._v("它主要用于黑盒测试。")]),t._v(" "),_("p",[t._v("要使用像Lettuce这样的BDD测试工具完美执行，就需要在项目的所有相关各方之间进行及时的沟通。")]),t._v(" "),_("p",[t._v("生菜是否是最适合您的Python自动化框架？")]),t._v(" "),_("p",[t._v("Lettuce使Selenium测试自动化的整个过程具有可扩展性，可读性和易用性。 使用像Lettuce这样的BDD工具最好的部分是，非技术人员也可以参与测试创建过程，因为测试是从业务需求中衍生出来的。 Python开发人员和测试人员倾向于pytest-bdd，因为它具有其他BDD工具支持的大多数功能。")]),t._v(" "),_("h2",{attrs:{id:"_6-nose2"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_6-nose2","aria-hidden":"true"}},[t._v("#")]),t._v(" 6. Nose2")]),t._v(" "),_("p",[t._v("Nose2是Python中的单元测试框架，也是Nose框架的后继者。 因此，它是基于单元测试的； 它也称为单元测试的扩展。 Nose2通过提供用于执行测试的插件，启用自动发现测试用例以及收集文档的方式，为PyUnit框架增加了支持。")]),t._v(" "),_("p",[t._v("所有这些附加功能使使用PyUnit进行测试变得简单而容易。 Nose2的插件生态系统增加了对装饰器，固定装置，参数化测试，模块，类和测试发现的支持。 Nose2中的这种语言是DSL（领域专用语言），用于编写具有昂贵的嵌套功能的测试，也称为功能测试。 Such在Nose2中的更多详细信息可在Such的官方网站上找到。")]),t._v(" "),_("p",[t._v("Nose2官方网站– https://docs.nose2.io/en/latest/")]),t._v(" "),_("p",[t._v("GitHub上的Nose2 – https://github.com/nose-devs/nose2")]),t._v(" "),_("p",[t._v("以下是有关Nose2，Python测试框架的详细信息：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("Forks – 127")]),t._v(" "),_("th",[t._v("Used by – 2.2K")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Starred – 612")]),t._v(" "),_("td",[t._v("Contributors – 58")])]),t._v(" "),_("tr",[_("td",[t._v("Releases – 28")]),t._v(" "),_("td",[t._v("Commits – 934")])])])]),t._v(" "),_("p",[t._v("有哪些先决条件？")]),t._v(" "),_("p",[t._v("Nose2仅依赖于Python库随附的unittest模块。 可以使用Python Package Manager（pip）安装Nose2。")]),t._v(" "),_("p",[t._v("鼻子2的优点")]),t._v(" "),_("p",[t._v("以下是Nose2 python测试框架的一些优点：")]),t._v(" "),_("p",[t._v("随着Nose2扩展现有的单元测试框架，它很容易安装和入门。")]),t._v(" "),_("p",[t._v("借助测试发现，固定装置，参数化测试等功能，nose2使单元测试与PyTest一样有用。")]),t._v(" "),_("p",[t._v("用Nose2编写的脚本通过配置文件支持许多命令行选项和广泛的配置。")]),t._v(" "),_("p",[t._v("使用Nose2中的mp插件，可以与多个进程并行执行测试。 万一您的测试占用大量IO或CPU绑定，这可以加快测试执行速度。")]),t._v(" "),_("p",[t._v("Nose2有大量的插件，可以帮助加速Selenium测试自动化过程。")]),t._v(" "),_("p",[t._v("鼻子2的缺点")]),t._v(" "),_("p",[t._v("以下是Nose2 python测试框架的一些次要缺点：")]),t._v(" "),_("p",[t._v("Nose2的文档不如PyTest框架广泛。")]),t._v(" "),_("p",[t._v("对于要在其项目中使用Nose2的开发人员而言，Python 2.4（及更高版本）支持的不推荐使用的鼻子框架可能会成为一个潜在的障碍。")]),t._v(" "),_("p",[t._v("Nose2是最适合您的Python测试框架吗？")]),t._v(" "),_("p",[t._v("如果您的团队成员正在使用unittest框架并且不打算切换到任何其他框架（例如Lettuce，Behave，PyTest等），则值得尝试一下Nose2，因为它是unittest的扩展。")]),t._v(" "),_("p",[t._v("由于Nose2还支持并行测试，因此可以将其用于自动浏览器测试，在不同的浏览器和平台组合上执行测试方案。")]),t._v(" "),_("h1",{attrs:{id:"_7-testify"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#_7-testify","aria-hidden":"true"}},[t._v("#")]),t._v(" 7. Testify")]),t._v(" "),_("ol",[_("li")]),t._v(" "),_("p",[t._v("Testify是另一个流行的Python测试框架，被认为是unittest和鼻子框架的替代。 由于框架是在单元测试之后建模的，因此为单元测试编写的测试将需要进行最小的调整才能与Testify一起工作。")]),t._v(" "),_("p",[t._v("Testify可用于执行自动化的单元，集成和系统测试。 Testify的最新版本是0.11.0。 它具有可扩展的插件系统，可提供有关报告的有用功能。 像Nose2框架一样，Testify还提供了增强的测试发现以及类级别的SetUp和TearDown固定方法，这些方法对于整个测试方法集都执行一次。")]),t._v(" "),_("p",[t._v("见证官方网站-https://pypi.org/project/testify/")]),t._v(" "),_("p",[t._v("在GitHub上进行验证– https://github.com/Yelp/Testify")]),t._v(" "),_("p",[t._v("以下是有关Testify框架的详细信息：")]),t._v(" "),_("table",[_("thead",[_("tr",[_("th",[t._v("Forks – 69")]),t._v(" "),_("th",[t._v("Watched – 19")])])]),t._v(" "),_("tbody",[_("tr",[_("td",[t._v("Starred – 288")]),t._v(" "),_("td",[t._v("Contributors – 33")])]),t._v(" "),_("tr",[_("td",[t._v("Releases – 62")]),t._v(" "),_("td",[t._v("Commits – 974")])])])]),t._v(" "),_("p",[t._v("有哪些先决条件？")]),t._v(" "),_("p",[t._v("Testify框架的主要优点是，它基于现有的单元测试框架，具有柔和的学习曲线。 安装非常简单，因为它只需要Python Package Manager。")]),t._v(" "),_("p",[t._v("作证的优点")]),t._v(" "),_("p",[t._v("这是Testify框架的一些优点：")]),t._v(" "),_("p",[t._v("由于Testify基于unittest框架，因此很容易上手。")]),t._v(" "),_("p",[t._v("该框架具有可扩展的插件生态系统。")]),t._v(" "),_("p",[t._v("它具有附加的测试实用程序，可帮助进行集成，配置文件和代码覆盖。")]),t._v(" "),_("p",[t._v("与Nose2框架一样，Testify还具有增强的测试发现功能，这使查找测试变得非常容易。")]),t._v(" "),_("p",[t._v("它具有基于装饰器的灯具方法。")]),t._v(" "),_("p",[t._v("作证的缺点")]),t._v(" "),_("p",[t._v("这是Testify框架的一些次要缺点：")]),t._v(" "),_("p",[t._v("Testify也有与Nose2相同的问题，文档范围不广，如果您刚开始使用Testify框架，可能会遇到障碍。")]),t._v(" "),_("p",[t._v("正如在两个在线讨论论坛中指出的那样，使用Testify进行并行测试可能是一个障碍。")]),t._v(" "),_("p",[t._v("Testify是否是最适合您的Python测试框架？")]),t._v(" "),_("p",[t._v("像Nose2一样，如果您的团队正在寻找建立在unittest之上的Python测试框架，那么值得尝试Testify。 由于使用Testify实现并行测试有点困难，因此可能不适合自动浏览器测试之类的方案。")]),t._v(" "),_("p",[t._v("在本文中，我们看了一些可以与Selenium一起使用的流行的Python测试框架。 这些框架中的每一个都有其自己的优点和缺点。 如果您打算在测试创建过程中包括非技术人员，则应尝试使用BDD工具，例如“行为”或“生菜”。 综上所述，选择正确的Python测试框架纯粹取决于项目需求和团队中可用的能力。")]),t._v(" "),_("p",[t._v("您使用哪个特定的Python测试框架？ 请在评论部分分享您的经验。 另外，请随时在Twitter上转发我们，与您的朋友分享这篇文章。 快乐测试")])])}],!1,null,null,null);v.default=s.exports}}]);